#![no_std] // No standard library. We can't use this.
#![no_main] // We do have a main, but not in the standard Rust way.

extern crate alloc;

use alloc::vec;
use alloc::vec::Vec;
use core::alloc::{GlobalAlloc, Layout};

// Include assembly file during compilation.
// We need to include some things at the top of
// the text section.
use core::arch::global_asm;
use core::panic::PanicInfo;
use risc0_zkvm_platform::syscall::sys_alloc_aligned;
use winter_air::proof::StarkProof;
use winter_crypto::DefaultRandomCoin;
use winter_math::FieldElement;
use winter_math::fields::f128::BaseElement;
use winter_verifier::AcceptableOptions;
use hex_literal::hex;
global_asm!(include_str!("asm/init.s"));

mod air;
use air::FibAir;

pub type Blake3_192 = winter_crypto::hashers::Blake3_192<BaseElement>;

// Compute the nth Fibonacci number.
// fib(0) = 1, fib(1) = 1, fib(n) = fib(n-1) + fib(n-2)
fn fib(n: u32) -> u32 {
    match n {
        0 | 1 => 1,
        _ => fib(n - 1) + fib(n - 2),
    }
}

//const proof_bytes: &[u8; 6034] = b"020000030000100100000000d3ffffffffffffffffffff1c081001081f196000f4f4fa9dced79930c2d86dce5872b475c67e847250297e6e3f95871af00bcdd9d6f30f5c941bc5f74c4a56fa24a8b4a29a88dae1877110e1c29112261543e28b083582757c71a05853ee75d967d979300eb0212c35f35fb61c9cb086187ebba420030000d9013ab69a8e848b28053bbda939a30db392c1a215f00d1c5d8db018f349e4a513b09685f2dc940ea4ff73b46eabfc3f4c8695cdadc5b2ac6ffb6a8b69fa0a15a9257dc133fd0aa0a6b2dd03a93f1f603b43f047d03641f198654ddd2f73cc704f353348c60f7c0a67d0efc6efb37e4861d85d5b92917c7e7e8ca243e5e7c1838e4fe4285ce33ab426a0d5fc927b7798857ef9c0b6235076652d14184bb23dfc36e468394e0b3b2ae93980a17dd00a2172ba99f66373cc40a452e7a4cc81eaf57f0517239144a551a16607b57677fd3b9ab7ed36e4143e6df3c8aa95f842dc8b00264363c36600d27b4504619a59560011bfdb5d6c489ac1df1bc1a114378925fab3816757e2cb28fe6ab5f83685aac2bfb40cc01fc2f9ccf0a76b587c11efc7967568cd687c59d9f785f3d1446f088ad27ee1d87ad8c958907c08e60b777691b75665481ea714e6070e7317a62fef82e82c1f0e943eb0da0e18925d24533bf6efd627c282e264f8f68fac0b7b706cf7d50fd0a1c40ec8323a455acde801a842c5a7e63eadbf424dc7a1b5712c71f7de9d1b22bc762de755d78d376e0f0e1ca773f24ea6e38123328802fcb750e67e1ba487337f5e5aed8a187f049e5c5df5ace15a36bdb2ca7ee3493008f8d813c614451044bc8781daaa4c1dd4d9633cbf8b36b58a45d499fd4b59216ff971aa7c3e598110077009540c3388c6757edceba8c961f6c8b29969d6e4f69adfbdd80b89fc2fe65f11dc636e9f60aee3812edd7a5700aa5293b68da7bbe6bac3912872cc7ed2ef1f6322a54da8769d6ae011a7f658b87e896465066ea440b5d24043283690d58219866b4728a659140c17a227ccd7ee540fad7b3a4c6d5ee6730e46e1754fd14a9ce4e421762bf88587448b1ecbab8dc9c4a04ab8fa1965d6352dd0a5ce38c50fa09f2a8f34ea796985192aa08d1b354edf53edec8ad5b2d7c344d736576fb579a1b2014636a99b8578ddc4fa210dc9fff903952a5422f936a262c759b186fbc0c3776f5edbe58ec0ee55b2b8f18588aaab6359beb5f51b76cddec8293d88c182ba61d5dccf49988f3862dc39649ff707cebe1287503f33fcbbbae046df22d0351a382641e2d17100003a5197d2d40200001302ddb1300d31d1ba90e7a6e35d2ce09d644a29c6659e4c1e01f1cfcc9c2fbc58f851e71b8e2b2c312a49d04a079699c4a876a22ff18eaad2a7286ba861b42a119501b146e26dc480c28a8e33135cb53685e585a10dc32193d44b1dc2c5981be2b66c014af3bb22440742b3514f1211a37ef6396f4f24597043a60484802c6641c33402022197c3168b60d713216269a3bf75aa544fcb6564cda5bd8f6eae8432980e07cde07600ad4d88f464b6c92ac6268994ff2c6be944d58e0457d9014bb44d1233b4019f24d9e9b12c24b1f64d81bf97c05676e5ebb53bba67c16dad736770b81710d400016579bb043b6561a445f3c4fa47259739a93f4a78dcb67820fac178fb2cd6f1f600020c1766834c2333e5db812f394d824106bb4f1cce21c7ef3f009b8a34041d2a55d8bbeebcfa6b8c61bc74b89c73534cc24d49a810499e437ae8bbede1df45f3f80002aab918a40b3c097704d460387b9a2cc186f2ae9127d2fc1a59dd509e9829a13f552a768eeaa44816e43ea25fd041e3211fabd0ed80e7f2d06b8d761393e4a21e02b9765e2a412a6ef46194ace95090f87b2043efe4cda2f7f0b891668eb49bb334df8e47aaaa63d7820699ce4e1de180616bbb21e5f699b60b743b80c5ba50db9200021605bc95b7b1dcfdf560ebf48974d3ddfa0aec8ba8f83bb608fe6d3728472c9b68c7386081ef2a68a50df9ce4669f0b016fdbb8d041de78deaecafc67dd6b63f01ca2770a87066ce89ad1476856e7f744cd505f2c0d6d34ff9e7a640dba4e0305c01a021d93946ffec7aebe462177d8482422fbb1e48d3f7408aafb92b7559f9e05901a2619a75dc8b3df55be7e14cfe1134ab073da11e76dc22324bc892e1bef2a2f10144cb878599c9d022bb86b29b36cf15e9b0f112124a7b5b86c5e476ee93c92f5b024f6949f383b6279ada1c48bba2e7a6e873f4a9a79e4aa11e14344a462a4cd9b243e7e689169552dbce0bff7b7e2dfa16e379e6ebd6a04dcb7b922830aeb86edb90010000568d42f0943f0cc3dc521794543c6640d3b7f7e46d55f45cb0b294c1faa227d869d5ac15f375b3bc7b24e76d87dcbfda18d716cf7938602740f266a0246c086b18481ca144da082463a8ba84427b0cc34376b18817defbf8913951a0e5b22b8d9864accf73092f8815c44e289913b538134489238986c88ea5edb159c7030e09c85255bdc04d6e2c2d2fa222c8c5512b45eb4d4431f3012ab3639c2835fadc081da6e0ad1369f3a9f39a328bcfdbaf83e6b2264ce067e6666763a7cb891fee0f63e7f80daf6ab807d22a0a03bae5da6199ea07b59c7a4265c4107d7b4e1a35518fe73e1364d1bc102b2d7cc4aaf61ee404b0fd760b0a58aa5ff714392d4cd2b30a28d6e1a76db6751057368d6bd7a3bb76bd4c2c85bec2d6208615d829321a49ce0e043f42ef1f5842c447f058ab47e871a63667ef74a97b899194209d0ee088c5d12fc28f4005298b9cbbd2197c47d8c2a19e3385afa613f1f5d3a845dba056c9461cc00e01a58be24f5b12a4ad34188599ec8ad79cf1bc2f972eb971b5df3ab7a8b1f193d239b64d0dd78d0a36e8ddd40200001302d8ee099100a882a7737588c9fb1f7a095ca3ee5ef40f129253b52579bf0d2c9aaec52a4fe662a68ce213f2b12b1e921ccfecd98132456620321c1c7c21492eaa010281a7cf03115acc2d5697673feb2108a10990f85ef58772a7228d1ad6ac9a73015fb52f3ab71eb7fb1b9a0c7a76e5275e5b265ed0c31d00db1620bf8462932a1f02f48d032333f6f3de168fcb163dac63898d0ef5731602cd60a6b05d0cf00fcd688ffe75b202814facb9e86b96311cac19cd1e2f05c2a8c4dbcac0257b0b2b41040171c1612e270e5a8698309fb511c26d841eb9748fc171b8f9dad2a7c6e882856e0001285a6adb5e4dac84504855ca5a777eb67b33e4391b8c561ee16a16c063d2d18c0002db1e4d18fcd55f05ec5890174858d3ffe035bf06341750d530e416bb0961f0be6d284f9f20db91f82868a17ce855067c8b42caf41984b4140f42c5f2f4a474780002bbdc0ba8136fed301ef44b2be38610d53bbf62d091a91078848045122ca097fea3271679cba583064bf26277d9ccb46c0c4a17c39f077282341a8eca468e4522022b2c227775481277250f802398c37160e497f456a0d14cf852b5c357b4af969ff9d1896d4a1b38294db7ccd2e02cb3ae10bff28061793a9b7aa36d8115eaea6700024b552da31463a8243888154c5f31837ad9e82402e8d897db5fd391af92acbdeb47af1ce33e1ed0ddc1359a2e54fc0c5ff0b5a4b333aa33471dba2b8578d1691f018bd4224b3f88ae258a0edda0041d7e2da9011515913c8c07da78c0f02faed59f01a016dfbeb2e2a6bf9331a9ed2bcc7a294ab61c5919b8e78c915327d6088e9b96019c311789a9fa1d952cf7ce03436daa0737596ebb108d02d95d9af75cb4e30a1d01d491f575e4d7f7373a090b02c211083b102533ab6a1b6b62050f580bbbed3761024b27964f2e948323d59c226b7a2fde3784deb5d200a3ab68f7fb03b1d6da5ce1b2f24b8bcc976bb15ed5520f15d6e49b77119e878e7469a3f228d99e0d78dd14410002627000753d69b672a09e6521398567322c3b318bdaf1ffc2aa350bca5c4318f6b12837740a603f5714754a70a0fc00c5a1fad65c21d7856d2ba84ae780c8565f1000fe267b7799f3697313dde994a9d0fa740080004d1855e4de352d26295c319d35ea717c4be795dea9567c38c0e5f28d6a5affad0d857ac7746ed3a422356bd9d2c746704f5525fa6630066fddaec029d17ccea8a79be7b7c33624fd151ae5358a11ba52c35a64537e730317f49b41939276df22e1db1ece6ad1f62fb74ec017adc70b290000000000000000000000000000000000fd1d000000000000";
const proof_bytes: [u8; 2591] = hex!("020000030000100100000000d3ffffffffffffffffffff1c081001081f18480049f086948bead6499f93980e8b92609be58e08e88b59e4213c23dd7e2f9ac7189b540905fa9c38bdba206005fd05871916ad6555652dc8f52bf0273824fa65fe30dc9ead1adcead400030000a8cb33e8f665c83211a5fcbbf431deb10b6f63022fb90915e316fdbb2e83758495c1bd793d428e61b07cf541c17a3e280cf6e101abdec9880dc4215cf01aebe5d0dce256f44c815b09d02e1c8d353ad2cdccc0c6326cc4ad4f7ee8fd16b3a65ad9013ab69a8e848b28053bbda939a30db392c1a215f00d1c5d8db018f349e4a52e0c4d7923b304800511b8d52efe651475db267029722500e6e282d14173410098c91a6db5e39820fdb662c2dc3cb409f9a198177e8680398d5030ceccf4347f13b09685f2dc940ea4ff73b46eabfc3f4c8695cdadc5b2ac6ffb6a8b69fa0a15a9257dc133fd0aa0a6b2dd03a93f1f603b43f047d03641f198654ddd2f73cc709c78e56035c6fda33c893b1e7901a7a4d5c30644cc3fc4788c6cab3d05239a66ca5d4a0eb73bac2ac3877f6cfedfc8fb4693d0442b2e0b88795f5e1d5e4af82d8e6f7593251abd9f76be1a23dc3cba425ba8d24c60b5de4c72bcb104f4c1fcebefd627c282e264f8f68fac0b7b706cf7d50fd0a1c40ec8323a455acde801a842fea94e980827281deaf407df67ecf4b084f28745a6ff132d3800fe96cef7e4d4c5a7e63eadbf424dc7a1b5712c71f7de9d1b22bc762de755d78d376e0f0e1ca7f67cd95f703932e6aed1b7cb51a0ac6b4b212bc3b1afbc7e15479c06aeb2ddaa73f24ea6e38123328802fcb750e67e1ba487337f5e5aed8a187f049e5c5df5ac36b58a45d499fd4b59216ff971aa7c3e598110077009540c3388c6757edceba8d7ee540fad7b3a4c6d5ee6730e46e1754fd14a9ce4e421762bf88587448b1ecb44f5cf7848aedcba6b0fdfb0edc7b002b019b2e6b519531a12aaa054ab3432d352e165901627ebb6b2c6499d2220d81127f1cff398ad1846f1f41046b3c6dc9970a6c9338c4f5e82edba3be5fd63222b380546c7ca88f6d09dc7847085c53545f5e988461e6ca87160e87434bbebda7eae625d16103aeb1c00c852bd0979df8749f6e5d99da94269fed01721fe01eb208d91a933a86518a4231c7f798bb311927c49df14380dfa53769b1b9005a79b327df18e7df927b950ddc930b31adf7d9223020000120000019b0670b36355f73db5b1da257b56139da9a8f519f0b72eb9012c2a722f6cd734a3a8c6f71037dcb2ee923da5a20d1608a0018ddb003caeba4c7e77dec99246ea7d0242236c2671178d12016c087ab362b096fc118b5af0e7fe9bd31b12081132ce93c303aeffa2bb3198fc373f7bc4b39fd835c956a52200e16c0c6d855db087e174374d613b2c40bd22d64c48606f8fcc17a1e96fd569f22410fb880669372272a6eccfb9690d5106eec848025d3d2f7d50b4ace4fe0cb92fa97eeeb7d1d1e68a54cc6074cd2e52747caf6b21cab6f731c954eec3e8d33b4e030cf0bc01aa39101638beb3bf05190c3747d9b3b27ba3f39a6e6d582b014814de8ee1621d27ef2b71649a563079a8a9edc603c8018501bbfdb405d025018b219ab4fd32980e8b13ae0c7325a8a92b01aab918a40b3c097704d460387b9a2cc186f2ae9127d2fc1a021605bc95b7b1dcfdf560ebf48974d3ddfa0aec8ba8f83bb6ad0bdafa83ca53386a12329d047f38f2b4d500f2757c1076021a5b3244083ae9e78b9c17fdc5926638aae91683c60b1435f3d084f79529730e2e20db3b606f766e0e578a7af404e38d02229c730e202086879486a9c6b20523d0bb3e513357b165e369e040812ae53c30985bcefd658e150020fa57177dfd70a2026eedfde979e26ab7c7a886796f506ceead318943cdeff2e7aaffbfd42797f06b4c942a422be815207da423a18546dce6012d58636196158ceea9078fe9fd2a04d759a39e2bb569c276008001000038eac56ce1cbfc8ff9308d083df3d6522feaa90e499d74f5feec7da8b09acf4ed513378c7504aad489fac9886db612f4550ad6ba3ee04534382410891f750d23785e265f5aef6f1a9017a25a87f0198e5120a2ffff45e5905f952c67a8d9c7ad6b51ecf627e242507307ac77522b9ec46a82c1873ef879f4ff51d238b85734ea82eafe88fbec9122075c8cc5b7a3658661ca140185ef77a8cb57f2d2dfea5198e01f2b8db177ed99093c09bdfed99e0b3217f2e8411fb6eb296a065670dc0a23267d085c8eb9dc84ac2d12592a0c07ae0a8d5b7cacf05b45ae41cc294de189bc477755a5393582ba150308fff6eed3eb9b364961b65527c8d5d7fcdaed073addfd856f852b6042e3e0b77600a4d6aa657d8d8f6f78718aefa3c1a6d5373796ff4aaebaccaac303e835aed731dfded35ca88ac6d3f6ba26a6cfca0cb7dc51b5daa35474e2e3420398c75434d12cee56ebe2b2386f6ccfb1114ffd0c0a9f97e0f13915366ef09a8667bff20bc3ee293d0072ac98782f22ba0faaef74e6bfe4ebb3230200001200000103df061b6eb415d312a108b2f368821644b915d4fec7f1ea01dd284be151c7c1b7bf80d8bf9e7fd711f9663fa3adac938c0193521887985d088c27144de4fd9127a6c5935fbc1b85fbb6018ba5e301ebb1380f613040e210feb6e425ba89eb99e227dc0329e74bd5802b43df3dbaa1f88ec0555c04d864157fda037b2120f5e820c61024e9e205a3f4872b1eae000148d3b4a77fa7bdebc196983bd7406ba9d9401577e382509739fdc0231c020bca4de16d758fefcd3b0685c68110ea3d2f261d427e8bc4483b29145201003f8cbc5e2ad1e42b6db39f0c4366acf7fb015c9794df07a7e2624a00cd23764d7165197b3f554be1e2b1019d8a36f19cf364b3c7ee78a58bf4521671f4b69d4df8523901eed53ed7acca145fee21c1555bd012468d54d3b29fd548c0010cb69e8c09791d0b5921380731ae8d3ef27201c37fde0aeb0205d938f207a7ddab972be4186245a90fb776b6a0cdceaedb2fa74fe0c065968502659a42f98fb3b10576793d865c580002f5c542d6993fd6ee7d9acda9b032606e19b30b0547870e0b50db6838d601f8f93593abec31b359dcdd35b4ac6973cde9029e6247be36d10d5cfa2c498eef878fb52d945e9d042d1fe13e503b7d47af889fea44ccb4f083ee6dc8bb156f6ec52b0a02f7cdf7291d4f0bbfb7a8810d57f051fc9a83ae4f9bfe6656bbf61018fa5da638ed74b4e8bd4546979402d0491e3cd72b01c67ddf2cb71f7c8182187b075d93104f73cf8bc8316e8d4c0041000222aee17881540f1ae06ce1ee70fd68858ad3586857ea1b30541cad25d1ded72fb4e9a05d35c723ac1906f76125b5076653110f56e91402174455c97df22b8bc31000be66c25d000f96841c394a38fdfe4f37008000853470e827e33d82bcbae8201e5a82db0fc3be1d52ad0bb5d7acb109c092c768801c6c5268e46adc172fe35369c0ef71eaa69156560174617dea0a0c6d4335559f9c1e881bfd6de9f8ae8a45de6e8c6d765b47120adf8e86770ff1c362523f44252ae4f2a00fb8e2f4a7875acf1591c00000000000000000000000000000000000d2db000000000000");

#[no_mangle]
pub extern "C" fn runcontract(x: u32) -> u32 {
    let mut y = x;
    let mut i = 0;
    while i < 8 {
        y = y + y;
        i = i + 1;
    }
    //
    //    //    return y;
    //
    //let sw = x;

    // Calculate fibonacci number.
    //let fib = fib(sw) as u16;
    //return fib as u32;
    //let ret = match fib {
    //    1 => 1,
    //    _ => 2,
    //};

    //return ret;
    //return fib as u32;

//    let min_sec = AcceptableOptions::MinConjecturedSecurity(95);

//    const count: usize = proof_str.chars().count();
//    let mut pbytes = [0u8; count / 2];
//    hex::decode_to_slice(proof_str, &mut pbytes).unwrap();
    let proof = match StarkProof::from_bytes(&proof_bytes) {
        Ok(p) => p,
        Err(e) => return 11,
    };
    //return 44;

    let mut set = Vec::new();
    set.push(proof.options().clone());

    let acceptable_options = AcceptableOptions::OptionSet(set);

    let fib_result = compute_fib_term(16);

    let result = winter_verifier::verify::<FibAir, Blake3_192, DefaultRandomCoin<Blake3_192>>(
        proof, fib_result, &acceptable_options,
    );

    match result {
        Ok(r) => {
            return 12;
        }
        Err(e) => {
            return 13;
        }
    };
}


pub fn compute_fib_term<E: FieldElement>(n: usize) -> E {
    let mut t0 = E::ONE;
    let mut t1 = E::ONE;

    for _ in 0..(n - 1) {
        t1 = t0 + t1;
        core::mem::swap(&mut t0, &mut t1);
    }

    t1
}

// Unlike C, Rust panics sometimes. This can be very
// helpful when you don't have a lot of debugging
// visibility.
#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    loop {}
}

struct BumpPointerAlloc;

unsafe impl GlobalAlloc for BumpPointerAlloc {
    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        sys_alloc_aligned(layout.size(), layout.align())
        //sys_alloc_aligned(layout.size(), layout.align())
    }

    unsafe fn dealloc(&self, _: *mut u8, _: Layout) {
        // this allocator never deallocates memory
    }
}

#[global_allocator]
static HEAP: BumpPointerAlloc = BumpPointerAlloc;
